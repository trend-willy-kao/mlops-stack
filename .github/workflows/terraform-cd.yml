# This GitHub workflow deploys Terraform resources (ML resource config and more)
# defined under databricks-config, when PRs are merged into the default branch
name: Terraform Deployment for gcp-mlops

on:
  push:
    branches:
      - 'main'
    paths:
      - 'databricks-config/**'
  workflow_dispatch:

defaults:
  run:
    working-directory: ./databricks-config

jobs:
  staging:
    concurrency: gcp-mlops-staging-terraform-job
    runs-on: ubuntu-latest
    env:
      DATABRICKS_HOST: https://6837671528024691.1.gcp.databricks.com
      
      DATABRICKS_TOKEN: ${{secrets.STAGING_WORKSPACE_TOKEN}}
    permissions:
      contents: write
      pull-requests: write 
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_CLOUD_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT}}
        
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=staging fmt -check
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "Workload Identity has been configured" 
      - name: Terraform Init
        id: init
        run: terraform -chdir=staging init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=staging validate
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=staging plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=staging apply -auto-approve \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Terraform Output
        id: output
        run: terraform -chdir=staging output -json
      - name: Commit Terraform Output to File
        id: commit
        run: |
          mkdir -p output
          echo '${{ steps.output.outputs.stdout }}' | jq '.' > output/staging.json
          git config --global user.name 'Terraform Output Github Workflow'
          git config --global user.email '<>'
          output=$(git status --porcelain)
          if [ -n "$output" ]
          then
            git add -A
            git commit -m "Commit staging output"
            git push
            git fetch origin release
            git checkout release
            git cherry-pick main
            git push
          fi
  prod:
    concurrency: gcp-mlops-prod-terraform-job
    needs: staging
    runs-on: ubuntu-latest
    env:
      DATABRICKS_HOST: https://6837671528024691.1.gcp.databricks.com
      
      DATABRICKS_TOKEN: ${{secrets.PROD_WORKSPACE_TOKEN}}
    permissions:
      contents: write
      pull-requests: write 
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_CLOUD_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT}}
        
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=prod fmt -check
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "Workload Identity has been configured" 
      - name: Terraform Init
        id: init
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=prod validate
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=prod apply -auto-approve \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Terraform Output
        id: output
        run: terraform -chdir=prod output -json
      - name: Commit Terraform Output to File
        id: commit
        run: |
          git pull
          mkdir -p output
          echo '${{ steps.output.outputs.stdout }}' | jq '.' > output/prod.json
          git config --global user.name 'Terraform Output Github Workflow'
          git config --global user.email '<>'
          output=$(git status --porcelain)
          if [ -n "$output" ]
          then
            git add -A
            git commit -m "Commit prod output"
            git push
            git fetch origin release
            git checkout release
            git cherry-pick main
            git push
          fi
