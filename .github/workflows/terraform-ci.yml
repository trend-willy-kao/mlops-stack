# This GitHub workflow tests and validates Terraform config (ML resource config and more)
# defined under databricks-config, when PRs are merged into the main branch
name: Terraform Tests for gcp-mlops

on:
  workflow_dispatch:
  pull_request_target:
    paths:
      - 'databricks-config/**'

defaults:
  run:
    working-directory: ./databricks-config

# Code reference can be found at https://github.com/hashicorp/setup-terraform
jobs:
  staging:
    concurrency: gcp-mlops-staging-terraform-job
    runs-on: [mlops-runner]
    env:
      DATABRICKS_HOST: https://6837671528024691.1.gcp.databricks.com
      DATABRICKS_TOKEN: ${{secrets.STAGING_WORKSPACE_TOKEN}}
    permissions:
      contents: read
      id-token: write
      issues: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_CLOUD_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT}}
        
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "Workload Identity has been configured" 
      - name: Terraform Init
        id: init
        run: terraform -chdir=staging init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=staging validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=staging plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Create Comment with Terraform Plan
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Staging Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Staging Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Staging Validation ü§ñ \`${{ steps.validate.outcome }}\`
            <details><summary>Staging Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Staging Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Staging Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  prod:
    concurrency: gcp-mlops-prod-terraform-job
    runs-on: [mlops-runner]
    env:
      DATABRICKS_HOST: https://6837671528024691.1.gcp.databricks.com
      
      DATABRICKS_TOKEN: ${{secrets.PROD_WORKSPACE_TOKEN}}
    permissions:
      contents: read
      id-token: write
      issues: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_CLOUD_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT}}
        
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "Workload Identity has been configured"
      - name: Terraform Init
        id: init
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=prod validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      - name: Create Comment with Terraform Plan
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Prod Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Prod Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Prod Validation ü§ñ \`${{ steps.validate.outcome }}\`
            <details><summary>Prod Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Prod Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Prod Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
